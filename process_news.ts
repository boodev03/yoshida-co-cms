import { parse } from "csv-parse/sync";
import * as fs from "fs";
import * as path from "path";

// --- TYPE DEFINITIONS (matching the database schema) ---

interface Category {
  id: number;
  type: "news";
}

interface CategoryTranslation {
  category_id: number;
  language_code: "ja" | "en";
  category_name: string;
}

interface Post {
  id: number;
  type: "news";
  thumbnail: string;
  date: string;
}


interface PostTranslation {
  post_id: number;
  language_code: "ja" | "en";
  title: string;
  cardDescription: string;
  category: string;
}

// --- CSV ROW INTERFACE ---

interface CsvRow {
  ID: string;
  Title: string;
  Content: string;
  Excerpt: string;
  "Post Type": string;
  "Image URL": string;
  カテゴリー: string;
  _locale: string;
  _original_post: string;
  Status: string;
  Date?: string;
}

// --- UTILITY FUNCTIONS ---

/**
 * Escapes a string for use in an SQL single-quoted literal.
 */
const escapeSqlString = (value: string | null | undefined): string => {
  if (value === null || value === undefined) {
    return "NULL";
  }
  return `'${value.replace(/'/g, "''")}'`;
};

/**
 * Extracts the first image URL from the pipe-separated string, skipping PDF files.
 */
const getThumbnailUrl = (imageUrlField: string | undefined): string => {
  if (!imageUrlField) return "";
  const urls = imageUrlField.split("|");
  
  // Find the first URL that is an image file (not PDF)
  for (const url of urls) {
    if (url && !url.toLowerCase().endsWith('.pdf')) {
      return url;
    }
  }
  
  return "";
};

/**
 * Creates a short description from the main content.
 */
const createCardDescription = (content: string | undefined): string => {
  if (!content) return "";
  const plainText = content
    .replace(/<[^>]*>/g, " ")
    .replace(/\s+/g, " ")
    .trim();
  return plainText.length > 150
    ? plainText.substring(0, 147) + "..."
    : plainText;
};

// --- MAIN LOGIC ---

/**
 * Main function to process the CSV and generate the SQL file for news.
 */
const generateNewsSqlScript = () => {
  const csvFilePath = path.join(__dirname, "新着情報_all.csv");
  if (!fs.existsSync(csvFilePath)) {
    console.error(`Error: The file ${csvFilePath} was not found.`);
    return;
  }
  const fileContent = fs.readFileSync(csvFilePath, { encoding: "utf-8" });

  // Parse the CSV content
  const records: CsvRow[] = parse(fileContent, {
    columns: true,
    skip_empty_lines: true,
  });

  // Filter for relevant posts (published news items)
  const publishedNews = records.filter(
    (row) => row.Status === "publish" && row["Post Type"] === "post"
  );

  const japaneseNews = publishedNews.filter(
    (row) => !row._original_post || row._locale === "ja"
  );
  const englishNewsMap = new Map<string, CsvRow>(
    publishedNews
      .filter((row) => row._locale === "en_US" && row._original_post)
      .map((row) => [row._original_post, row])
  );

  const sqlStatements: string[] = [];
  sqlStatements.push("-- Generated by TypeScript Script for News\n");
  sqlStatements.push("-- Languages table pre-populated as per schema");
  sqlStatements.push(
    "INSERT OR IGNORE INTO languages (code, name, is_default) VALUES ('en', 'English', FALSE), ('ja', 'Japanese', TRUE);\n"
  );

  // 1. Process Categories
  console.log("Processing news categories...");
  const uniqueCategories = new Set<string>();
  japaneseNews.forEach((row) => {
    // The 'カテゴリー' column seems to be the one for news categories
    if (row.カテゴリー) {
      row.カテゴリー.split("|").forEach((cat) => {
        if (cat) uniqueCategories.add(cat.trim());
      });
    }
  });

  const categoryMap = new Map<string, number>();
  let categoryIdCounter = 300; // Start high to avoid clashes

  sqlStatements.push("-- Inserting News Categories");
  for (const catName of uniqueCategories) {
    const categoryId = categoryIdCounter++;
    categoryMap.set(catName, categoryId);

    const category: Category = { id: categoryId, type: "news" };
    sqlStatements.push(
      `INSERT OR IGNORE INTO categories (id, type) VALUES (${
        category.id
      }, ${escapeSqlString(category.type)});`
    );

    const catTranslation: CategoryTranslation = {
      category_id: categoryId,
      language_code: "ja",
      category_name: catName,
    };
    sqlStatements.push(
      `INSERT OR IGNORE INTO category_translations (category_id, language_code, category_name) VALUES (${
        catTranslation.category_id
      }, ${escapeSqlString(catTranslation.language_code)}, ${escapeSqlString(
        catTranslation.category_name
      )});`
    );
    // NOTE: English category names are not in the CSV, so only insert Japanese.
  }
  sqlStatements.push("\n-- End of News Categories\n");

  // 2. Process Posts and Translations
  console.log("Processing news posts and translations...");
  sqlStatements.push("-- Inserting News Posts and Post Translations");
  for (const jaNews of japaneseNews) {
    const postId = parseInt(jaNews.ID, 10);
    if (isNaN(postId)) continue;

    const postCategories = jaNews.カテゴリー
      ? jaNews.カテゴリー
          .split("|")
          .filter((c) => c)
          .join(",")
      : "";

    // Create the main post entry
    const post: Post = {
      id: postId,
      type: "news",
      thumbnail: getThumbnailUrl(jaNews["Image URL"]),
      date: jaNews.Date || "",
    };
    sqlStatements.push(
      `INSERT OR IGNORE INTO posts (id, type, thumbnail, date) VALUES (${
        post.id
      }, ${escapeSqlString(post.type)}, ${escapeSqlString(
        post.thumbnail
      )}, ${escapeSqlString(post.date)});`
    );

    // Create Japanese translation
    const jaTranslation: PostTranslation = {
      post_id: postId,
      language_code: "ja",
      title: jaNews.Title,
      cardDescription: createCardDescription(jaNews.Content),
      category: postCategories,
    };
    sqlStatements.push(
      `INSERT OR IGNORE INTO post_translations (post_id, language_code, title, cardDescription, category) VALUES (${
        jaTranslation.post_id
      }, ${escapeSqlString(jaTranslation.language_code)}, ${escapeSqlString(
        jaTranslation.title
      )}, ${escapeSqlString(jaTranslation.cardDescription)}, ${escapeSqlString(
        jaTranslation.category
      )});`
    );

    // Check for and create English translation
    const enNews = englishNewsMap.get(jaNews.ID);
    if (enNews) {
      const enTranslation: PostTranslation = {
        post_id: postId,
        language_code: "en",
        title: enNews.Title,
        cardDescription: createCardDescription(enNews.Content),
        category: postCategories,
      };
      sqlStatements.push(
        `INSERT OR IGNORE INTO post_translations (post_id, language_code, title, cardDescription, category) VALUES (${
          enTranslation.post_id
        }, ${escapeSqlString(enTranslation.language_code)}, ${escapeSqlString(
          enTranslation.title
        )}, ${escapeSqlString(
          enTranslation.cardDescription
        )}, ${escapeSqlString(enTranslation.category)});\n`
      );
    } else {
      sqlStatements.push("\n");
    }
  }
  sqlStatements.push("\n-- End of News Posts\n");

  // 3. Write to SQL file
  const outputFilePath = path.join(__dirname, "insert_news.sql");
  fs.writeFileSync(outputFilePath, sqlStatements.join("\n"));

  console.log(
    `Successfully generated SQL script for news at: ${outputFilePath}`
  );
};

// Execute the script
generateNewsSqlScript();
